[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aind-dashboard"
dynamic = ["version"]
requires-python = ">=3.11"
description = "AIND Dashboard - A Dash application for data visualization and analysis"
dependencies = [
    # Core web framework
    "dash>=2.0,<3.0",
    "dash-daq>=0.6.0",
    "dash-bootstrap-components>=1.7.0",
    "flask>=3.0.0",
    "gunicorn>=23.0.0",
    
    # Data analysis and visualization
    "plotly>=6.3.0",
    "pandas>=2.3.0",
    "numpy>=2.3.0",
    "scipy>=1.16.0",
    "scikit-learn>=1.7.0",
    "seaborn>=0.13.0",
    "matplotlib>=3.10.0",
    
    # AIND specific packages
    "aind-analysis-arch-result-access>=0.7.4",
    "aind-data-access-api>=1.5.0",
    
    # AWS and cloud services
    "boto3>=1.40.0",
    "botocore>=1.40.0",
    "s3fs>=2025.9.0",
    
    # Async and networking
    "aiohttp>=3.12.0",
    "requests>=2.32.0",
    
    # Database and data access
    "pymongo>=4.3.0",
    "paramiko>=4.0.0",
    "sshtunnel>=0.4.0",
    
    # Utilities
    "python-dateutil>=2.9.0",
    "python-dotenv>=1.1.0",
    "tqdm>=4.67.0",
    "retrying>=1.4.0",
]

[project.optional-dependencies]
dev = [
    # Code formatting
    "black>=23.0.0",
    "isort>=5.12.0",
    
    # Linting and code quality
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-import-order>=0.18.2",
    "flake8-black>=0.3.6",
    "flake8-isort>=6.0.0",
    
    # Type checking
    "mypy>=1.5.0",
    "types-requests>=2.31.0",
    
    # Code complexity analysis
    "radon>=6.0.1",
    "mccabe>=0.7.0",
    
    # Pre-commit hooks for automation
    "pre-commit>=3.4.0",
    
    # Security scanning
    "bandit>=1.7.5",
    
    # Dead code static checks
    "vulture>=2.7",
]

test = [
    # Core testing framework
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    
    # Additional testing utilities
    "factory-boy>=3.2.0",
    "freezegun>=1.2.0",
    
    # Already included in main dependencies
    "requests>=2.25.0",
]

[tool.setuptools.packages.find]
include = ["app_elements*", "app_utils*", "callbacks*"]
exclude = ["tests*", "Lib*", "Include*", "Scripts*", "assets*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.pytest_cache
  | __pycache__
  | build
  | dist
  | assets
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app_elements", "app_utils", "callbacks", "shared_utils"]
known_third_party = ["dash", "pandas", "plotly", "seaborn"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["*/__pycache__/*", "*/.*", "assets/*"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "tests/",
    "assets/",
    ".pytest_cache/",
]

[[tool.mypy.overrides]]
module = [
    "dash.*",
    "plotly.*",
    "seaborn.*", 
    "dash_daq.*",
    "dash_bootstrap_components.*",
    "aind_analysis_arch_result_access.*"
]
ignore_missing_imports = true

[tool.vulture]
# Start with conservative settings for initial analysis
min_confidence = 80
paths = [
    "app.py",
    "shared_utils.py", 
    "app_elements/",
    "app_utils/",
    "callbacks/"
]
exclude = [
    "tests/",
    "__pycache__/",
    "*.pyc",
    ".pytest_cache/",
    ".git/"
]
# Generate detailed output with file locations
verbose = true
# Sort by size to prioritize larger dead code chunks
sort_by_size = true 